import java.sql.*;
import java.util.Scanner;

public class LibraryManagement {

    // Database connection parameters
    private static final String URL = "jdbc:postgresql://localhost:5432/postgres";
    private static final String USER = "postgres";
    private static final String PASSWORD = "midhun";

    // Method to get database connection
    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }

    // Add a new book
    public static void addBook(String title, String author, int year) {
        String sql = "INSERT INTO books (title, author, year) VALUES (?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, title);
            stmt.setString(2, author);
            stmt.setInt(3, year);
            stmt.executeUpdate();
            System.out.println(" Book added successfully.");
        } catch (SQLException e) {
            System.out.println(" Error adding book: " + e.getMessage());
        }
    }

    // View all books
    public static void viewBooks() {
        String sql = "SELECT * FROM books ORDER BY id";
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.println("\n Book List:");
            while (rs.next()) {
                System.out.printf("ID: %d | Title: %s | Author: %s | Year: %d\n",
                        rs.getInt("id"),
                        rs.getString("title"),
                        rs.getString("author"),
                        rs.getInt("year"));
            }

        } catch (SQLException e) {
            System.out.println(" Error retrieving books: " + e.getMessage());
        }
    }

    // Delete a book by ID
    public static void deleteBook(int id) {
        String sql = "DELETE FROM books WHERE id = ?";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println(" Book deleted.");
            } else {
                System.out.println(" Book with ID " + id + " not found.");
            }
        } catch (SQLException e) {
            System.out.println("Error deleting book: " + e.getMessage());
        }
    }

    // Menu system
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n Library Management Menu:");
            System.out.println("1. Add Book");
            System.out.println("2. View All Books");
            System.out.println("3. Delete Book");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = -1;

            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println(" Invalid input. Please enter a number.");
                continue;
            }

            switch (choice) {
                case 1:
                    System.out.print("Enter Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Author: ");
                    String author = scanner.nextLine();
                    System.out.print("Enter Year: ");
                    int year = Integer.parseInt(scanner.nextLine());
                    addBook(title, author, year);
                    break;

                case 2:
                    viewBooks();
                    break;

                case 3:
                    System.out.print("Enter Book ID to delete: ");
                    int id = Integer.parseInt(scanner.nextLine());
                    deleteBook(id);
                    break;

                case 4:
                    System.out.println(" Exiting program.");
                    return;

                default:
                    System.out.println(" Invalid choice. Please try again.");
            }
        }
    }
}
